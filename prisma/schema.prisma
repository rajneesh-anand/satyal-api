
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}



model Account {
  id                 Int     @default(autoincrement()) @id
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id         Int     @default(autoincrement()) @id
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacherkyc {
    id                    Int     @default(autoincrement()) @id
    citizenPhotoFirstPage String
    citizenPhotoLastPage  String?  
    schoolIdentityCard    String?
    bachelorDegree        String?
    masterDegree          String?
    subjectList           String?
    bankName              String?
    bankBranch            String?
    accountName           String?
    accountNumber         String?
    userId                Int
    user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)


}

model User {
  id            Int     @default(autoincrement()) @id 
  email         String   @unique
  firstName     String
  middleName    String?
  lastName      String 
  password      String
  address       String
  city          String
  parentName        String?
  parentContactNumber String?
  province      String
  studentClass     String?
  userContactNumber    String
  image         String?
  userType      String  
  userStatus    String
  kycStatus     String?
  schoolName    String?
  schoolContact String?
  schoolAddress String?
  schoolCity    String?
  schoolProvince String?
  
  emailVerified DateTime?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at") 
  accounts      Account[]
  sessions      Session[]
  verificationTokens    VerificationToken[]
  teacherkycs   Teacherkyc[]
  // onlineClassesEnrolled StudentsInOnlineClass[] 
  purchases Purchase[] // This is a many-to-many relationship
  activeSubscription Boolean @default(false)
}

model VerificationToken {
  id         Int     @default(autoincrement()) @id
  identifier String?
  userId     Int?
  token      String   @unique
  expires    DateTime?   
  user User? @relation(fields: [userId], references: [id])
  @@unique([identifier, token])


}


model Order {
  id        Int     @default(autoincrement()) @id
  orderDate     DateTime  @default(now())  
  orderNumber     String
  email       String 
  planType    String
  planDetails String?
  amount      String?
  paymentId   String?
  paymentStatus String?
}


model Testinomial{
  id        Int  @default(autoincrement()) @id
  name      String
  className     String?
  status    String?
  description String?
  location    String ?
  image     String?  
  createdAt     DateTime  @default(now()) @map(name: "created_at")
}


model OnlineClass {
  id                  Int      @default(autoincrement()) @id
  onlineClassName     String   // The name of the online class
  onlineClassGrade    String   // The grade/level of the class (e.g., 10th Grade)
  onlineClassSection  String?  // Optional section within the grade
  teacherName         String      
  teacherEmail        String   // The email of the teacher
  enrollCode          String   @unique // A unique code for students to enroll
  meetingLink         String?   // The link to join the online class
  createdAt           DateTime @default(now())

  studentDetails      StudentsInOnlineClass[] // Many-to-many relation with User
  notes               Note[]
  worksheets          Worksheet[]
}

model StudentsInOnlineClass {
  id            Int    @default(autoincrement()) @id
  studentEmail  String 
  firstName     String
  lastName      String
  onlineClassId Int?  // Foreign key to OnlineClass
  onlineClass   OnlineClass? @relation(fields: [onlineClassId], references: [id])
}

model Note {
  id         Int      @default(autoincrement()) @id
  content    String   // The content of the note
  onlineClassId Int?    // Foreign key to OnlineClass
  onlineClass OnlineClass? @relation(fields: [onlineClassId], references: [id])
  createdAt  DateTime @default(now())
}

model Worksheet {
  id         Int      @default(autoincrement()) @id
  title      String   // The title of the worksheet
  content    String   // The content of the worksheet
  onlineClassId Int?    // Foreign key to OnlineClass
  onlineClass OnlineClass? @relation(fields: [onlineClassId], references: [id])
  createdAt  DateTime @default(now())
}

model Purchase {
  id        Int        @id @default(autoincrement())
  email      String
  userAccessStatus Boolean //this field used to user validation to access dashboard
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int @unique
  transactionId String 
  pidx String
  amount    Decimal
  purchaseOrderId String
  purchaseOrderName String
  paymentMethod String
  paymentStatus String

  // subscriptionStartDate DateTime @default(now())
  // subscriptionEndDate   DateTime @default(now())
  subscriptionStartDate String
  subscriptionEndDate   String
}


 